#! /bin/sh
# This script is a hand-made configure script. It contains a lot of
# code stolen from GNU autoconf. I removed all the code that was not
# useful for configuring a LyX installation.





####some configuration variables
lyx_check_config=yes
lyx_keep_temps=no
srcdir=

#### Parse the command line
for ac_option do
  case "$ac_option" in
    -help | --help | -h)
      cat << EOF
Usage: configure [options] 
Options: 
  --help                   show this help lines
  --keep-temps             keep temporary files (for debug. purposes)
  --without-latex-config   do not run LaTeX to determine configuration
EOF
      exit 0;;
    --without-latex-config)
      lyx_check_config=no ;;
    --keep-temps)
      lyx_keep_temps=yes ;;
  esac 
done


#### Checking for some echo oddities
if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null; then
  # Stardent Vistra SVR4 grep lacks -e, says ghazi@caip.rutgers.edu.
  if (echo -n testing; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then
    ac_n= ac_c='
' ac_t='	'
  else
    ac_n=-n ac_c= ac_t=
  fi
else
  ac_n= ac_c='\c' ac_t=
fi


#### I do not really know why this is useful, but we might as well keep it.
# NLS nuisances.
# Only set these to C if already set.  These must not be set unconditionally
# because not all systems understand e.g. LANG=C (notably SCO).
# Fixing LC_MESSAGES prevents Solaris sh from translating var values in `set'!
# Non-C LC_CTYPE values break the ctype check.
if test "${LANG+set}"   = set; then LANG=C;   export LANG;   fi
if test "${LC_ALL+set}" = set; then LC_ALL=C; export LC_ALL; fi
if test "${LC_MESSAGES+set}" = set; then LC_MESSAGES=C; export LC_MESSAGES; fi
if test "${LC_CTYPE+set}"    = set; then LC_CTYPE=C;    export LC_CTYPE;    fi


#### Guess the directory in which configure is located.
ac_prog=$0
srcdir=`echo $ac_prog|sed 's%/[^/][^/]*$%%'` 
srcdir=`echo "${srcdir}" | sed 's%\([^/]\)/*$%\1%'`
test "x$srcdir" = "x$ac_prog" && srcdir=.
if test ! -r ${srcdir}/chkconfig.ltx ; then
  echo "configure: error: cannot find chkconfig.ltx script"
  exit 1
fi


#### Create the build directories if necessary
for dir in bind clipart doc examples images kbd layouts reLyX \
    scripts templates ; do
  test ! -d $dir && mkdir $dir
done


#### Searching some useful programs
# Search LaTeX2e
echo $ac_n "checking for a LaTeX2e program""... $ac_c"
echo "$ac_t""(latex latex2e)"
LATEX=
for ac_prog in latex latex2e
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      LATEX="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$LATEX"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
## Check whether this is really LaTeX2e
rm -f chklatex.ltx
cat >chklatex.ltx <<EOF
\\nonstopmode\\makeatletter
\\ifx\\undefined\\documentclass\\else
  \\message{ThisIsLaTeX2e}
\\fi
\\@@end
EOF
if eval ${LATEX} chklatex.ltx </dev/null 2>/dev/null \
                       | grep 'ThisIsLaTeX2e' >/dev/null; then
  :
else
  LATEX=
  ac_result="not useable"
fi
rm -f chklatex.ltx chklatex.log
  echo "$ac_t""$ac_result"
  test -n "$LATEX" && break
fi
done

if test -z "$LATEX" ; then
  LATEX=none
    lyx_check_config=no
fi

if test x$lyx_check_config != x ; then
echo $ac_n "checking for the pdflatex program""... $ac_c"
echo "$ac_t""(pdflatex)"
PDFLATEX=
for ac_prog in pdflatex
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      PDFLATEX="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$PDFLATEX"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
## Check whether this is really LaTeX2e
rm -f chklatex.ltx
cat >chklatex.ltx <<EOF
\\nonstopmode\\makeatletter
\\ifx\\undefined\\documentclass\\else
  \\message{ThisIsLaTeX2e}
\\fi
\\@@end
EOF
if eval ${LATEX} chklatex.ltx </dev/null 2>/dev/null \
                       | grep 'ThisIsLaTeX2e' >/dev/null; then
  :
else
  LATEX=
  ac_result="not useable"
fi
rm -f chklatex.ltx chklatex.log
  echo "$ac_t""$ac_result"
  test -n "$PDFLATEX" && break
fi
done

if test -z "$PDFLATEX" ; then
  PDFLATEX=none
fi

fi

# Search for an installed reLyX or a ready-to-install one
save_PATH=${PATH}
PATH=${PATH}:./reLyX/
echo $ac_n "checking for reLyX LaTeX-to-LyX translator""... $ac_c"
echo "$ac_t""(reLyX)"
RELYX=
for ac_prog in reLyX
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      RELYX="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$RELYX"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$RELYX" && break
fi
done

if test -z "$RELYX" ; then
  RELYX=none
fi

PATH=${save_PATH}

# Search something to process a literate document
echo $ac_n "checking for a Literate programming processor""... $ac_c"
echo "$ac_t""("noweave -delay -index")"
LITERATE=
for ac_prog in "noweave -delay -index"
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      LITERATE="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$LITERATE"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$LITERATE" && break
fi
done

if test -z "$LITERATE" ; then
  LITERATE=none
fi

if test "$LITERATE" = "none"; then LITERATE_EXT="none"; else LITERATE_EXT=".nw"; fi

# Search for a Postscript interpreter
echo $ac_n "checking for a Postscript interpreter""... $ac_c"
echo "$ac_t""(gs)"
GS=
for ac_prog in gs
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      GS="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$GS"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$GS" && break
fi
done

if test -z "$GS" ; then
  GS=none
fi


# Search something to preview postscript
echo $ac_n "checking for a Postscript previewer""... $ac_c"
echo "$ac_t""(gv ghostview)"
GHOSTVIEW=
for ac_prog in gv ghostview
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      GHOSTVIEW="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$GHOSTVIEW"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$GHOSTVIEW" && break
fi
done

if test -z "$GHOSTVIEW" ; then
  GHOSTVIEW=none
fi


# Search for a program to preview pdf
echo $ac_n "checking for a PDF preview""... $ac_c"
echo "$ac_t""(xpdf acroread gv ghostview)"
PDFVIEWER=
for ac_prog in xpdf acroread gv ghostview
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      PDFVIEWER="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$PDFVIEWER"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$PDFVIEWER" && break
fi
done

if test -z "$PDFVIEWER" ; then
  PDFVIEWER=none
fi


# Search for a program to convert pdf to ps
echo $ac_n "checking for a PDF to PS converter""... $ac_c"
echo "$ac_t""(pdf2ps pdftops)"
PDFPS=
for ac_prog in pdf2ps pdftops
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      PDFPS="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$PDFPS"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$PDFPS" && break
fi
done

if test -z "$PDFPS" ; then
  PDFPS=none
fi


# Search for a program to convert dvi to ps
echo $ac_n "checking for a DVI to PS converter""... $ac_c"
echo "$ac_t""(dvips)"
DVIPS=
for ac_prog in dvips
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      DVIPS="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$DVIPS"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$DVIPS" && break
fi
done

if test -z "$DVIPS" ; then
  DVIPS=none
fi


# Search a *roff program (used to translate tables in ASCII export)
echo $ac_n "checking for a *roff formatter""... $ac_c"
echo "$ac_t""(groff nroff)"
ROFF=
for ac_prog in groff nroff
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      ROFF="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$ROFF"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$ROFF" && break
fi
done

if test -z "$ROFF" ; then
  ROFF=none
fi

ascii_roff_command=$ROFF
test $ROFF = "groff" && ascii_roff_command="groff -t -Tlatin1 \$\$FName"
test $ROFF = "nroff" && ascii_roff_command="tbl \$\$FName | nroff"

# Search the ChkTeX program
echo $ac_n "checking for ChkTeX""... $ac_c"
echo "$ac_t""(chktex)"
CHKTEX=
for ac_prog in chktex
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      CHKTEX="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$CHKTEX"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$CHKTEX" && break
fi
done

if test -z "$CHKTEX" ; then
  CHKTEX=none
fi

chktex_command=$CHKTEX
test $CHKTEX = "chktex" && chktex_command="$CHKTEX -n1 -n3 -n6 -n9 -n22 -n25 -n30 -n38"

# Search for a spellchecker
echo $ac_n "checking for a spell-checker""... $ac_c"
echo "$ac_t""(ispell)"
SPELL=
for ac_prog in ispell
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      SPELL="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$SPELL"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$SPELL" && break
fi
done

if test -z "$SPELL" ; then
  SPELL=none
fi


# Search a Fax handling program
echo $ac_n "checking for a fax driver""... $ac_c"
echo "$ac_t""(sendfax faxsend fax)"
FAX=
for ac_prog in sendfax faxsend fax
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      FAX="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$FAX"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$FAX" && break
fi
done

if test -z "$FAX" ; then
  FAX=none
fi

if test $FAX = sendfax ; then
  fax_command="sendfax -n -h '\$\$Host' -c '\$\$Comment' -x '\$\$Enterprise' -d '\$\$Name'@'\$\$Phone' '\$\$FName'"
elif test $FAX = faxsend ; then
  fax_command="faxsend '\$\$Phone' '\$\$FName'"
elif test $FAX = fax ; then
  fax_command="fax send '\$\$Phone' '\$\$FName'"
else
  fax_command="none"
fi

# Search for LinuxDoc support
echo $ac_n "checking for SGML-tools 1.x (LinuxDoc)""... $ac_c"
echo "$ac_t""(sgml2lyx)"
LINUXDOC=
for ac_prog in sgml2lyx
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      LINUXDOC="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$LINUXDOC"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$LINUXDOC" && break
fi
done

if test -z "$LINUXDOC" ; then
  LINUXDOC=none
fi

chk_linuxdoc=no
if test $LINUXDOC != none; then
  chk_linuxdoc=yes
  linuxdoc_cmd="\\def\\haslinuxdoc{yes}"
fi

case $LINUXDOC in
  sgml2lyx)
    linuxdoc_to_latex_command="sgml2latex"
    linuxdoc_to_html_command="sgml2html '\$\$FName'"
    linuxdoc_to_lyx_command="sgml2lyx";;
  none)
    linuxdoc_to_latex_command="none"
    linuxdoc_to_html_command="none"
    linuxdoc_to_lyx_command="none";;
esac

# Search for DocBook support
echo $ac_n "checking for SGML-tools 2.x (DocBook) or db2x scripts""... $ac_c"
echo "$ac_t""(sgmltools db2dvi)"
DOCBOOK=
for ac_prog in sgmltools db2dvi
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      DOCBOOK="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$DOCBOOK"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$DOCBOOK" && break
fi
done

if test -z "$DOCBOOK" ; then
  DOCBOOK=none
fi

chk_docbook=no
if test $DOCBOOK != none; then
  chk_docbook=yes
  docbook_cmd="\\def\\hasdocbook{yes}"
fi

case $DOCBOOK in
  sgmltools)
    docbook_to_dvi_command="sgmltools -b dvi"
    docbook_to_html_command="sgmltools -b html '\$\$FName'";;
  db2dvi)
    docbook_to_dvi_command="db2dvi"
    docbook_to_html_command="db2html '\$\$FName'";;
  none)
    docbook_to_dvi_command="none"
    docbook_to_html_command="none";;
esac

# Search for a spool command
echo $ac_n "checking for a spool command""... $ac_c"
echo "$ac_t""(lp lpr)"
LPR=
for ac_prog in lp lpr
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      LPR="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$LPR"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$LPR" && break
fi
done

if test -z "$LPR" ; then
  LPR=none
fi

case $LPR in
  lp) print_spool_command=lp
      print_spool_printerprefix="-d ";;
 lpr) print_spool_command=lpr
      print_spool_printerprefix="-P";;
   *) :;; # leave to empty values
esac

# Search for a latex to html converter
echo $ac_n "checking for an HTML converter""... $ac_c"
echo "$ac_t""(tth latex2html hevea)"
TOHTML=
for ac_prog in tth latex2html hevea
do
# Extract the first word of "$ac_prog", so it can be a program name with args.
set dummy $ac_prog ; ac_word=$2
if test -n "$ac_word"; then
  echo $ac_n "+checking for \"$ac_word\"""... $ac_c"
  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -x $ac_dir/$ac_word; then
      TOHTML="$ac_prog"
      break
    fi
  done
  IFS="$ac_save_ifs"

  if test -n "$TOHTML"; then
    ac_result=yes
  else
    ac_result=no
  fi
  
  echo "$ac_t""$ac_result"
  test -n "$TOHTML" && break
fi
done

if test -z "$TOHTML" ; then
  TOHTML=none
fi

case $TOHTML in
	tth) html_command="tth -t < '\$\$FName' > '\$\$OutName'";;
 latex2html) html_command="latex2html -no_subdir -split 0 -show_section_numbers '\$\$FName'";;
      hevea) html_command="hevea -s '\$\$FName'";;
esac

#### Explore the LaTeX configuration
echo $ac_n "checking LaTeX configuration""... $ac_c"
# First, remove the files that we want to re-create
rm -f textclass.lst packages.lst chkconfig.sed
if test ${lyx_check_config} = no ; then
  echo "$ac_t""default values"
else
  echo "$ac_t""auto"
  rm -f wrap_chkconfig.ltx chkconfig.vars chkconfig.classes chklayouts.tex
  cat >wrap_chkconfig.ltx <<EOF
\\newcommand\\srcdir{${srcdir}}
${linuxdoc_cmd}
${docbook_cmd}
\\input{${srcdir}/chkconfig.ltx}
EOF
  ## Construct the list of classes to test for.
  # build the list of available layout files and convert it to commands 
  # for chkconfig.ltx 
  for file in ./layouts/*.layout ${srcdir}/layouts/*.layout ; do 
    case $file in
      */\*.layout) ;;
      *) test -r "$file" && echo $file ;;
    esac
  done | sed -e 's%^.*layouts/\(.*\)\.layout$%\\TestDocClass{\1}%'\
             > chklayouts.tex
  eval ${LATEX} wrap_chkconfig.ltx 2>/dev/null | grep '^\+'
  eval `cat chkconfig.vars | sed 's/-/_/g'`
fi

# Do we have all the files we need? Useful if latex did not run
echo creating textclass.lst 
# if textclass.lst does not exist (because LaTeX did not run), 
# then provide a standard version.
if test ! -f textclass.lst ; then
  cat >textclass.lst <<EOF
# This file declares layouts and their associated definition files
# (include dir. relative to the place where this file is).
# It contains only default values, since chkconfig.ltx could not be run 
# for some reason. Run ./configure if you need to update it after a
# configuration change.  
article	article	article
report	report	report
book	book	book
linuxdoc	linuxdoc	linuxdoc
letter	letter	letter
EOF
fi

# if chkconfig.sed does not exist (because LaTeX did not run), 
# then provide a standard version.
if test ! -f chkconfig.sed ; then
  cat >chkconfig.sed <<EOF
s/@.*@/???/g
EOF
fi

echo creating packages.lst
# if packages.lst does not exist (because LaTeX did not run), 
# then provide a standard version.
if test ! -f packages.lst ; then
  cat >packages.lst <<EOF
# This file should contain the list of LaTeX packages that have been
# recognized by LyX. Unfortunately, since configure could not find
# your LaTeX2e program, the tests have not been run. Run ./configure
# if you need to update it after a configuration change.

EOF
fi

echo creating doc/LaTeXConfig.lyx
echo "s/@chk_linuxdoc@/$chk_linuxdoc/g" >> chkconfig.sed
echo "s/@chk_docbook@/$chk_docbook/g" >> chkconfig.sed
sed -f chkconfig.sed ${srcdir}/doc/LaTeXConfig.lyx.in >doc/LaTeXConfig.lyx

echo creating lyxrc.defaults
rm -f lyxrc.defaults
cat >lyxrc.defaults <<EOF
# This file has been automatically generated by LyX' lib/configure
# script. It contains default settings that have been determined by
# examining your system. PLEASE DO NOT MODIFY ANYTHING HERE! If you
# want to customize LyX, make a copy of the file LYXDIR/lyxrc as
# ~/.lyx/lyxrc and edit this file instead. Any setting in lyxrc will
# override the values given here.
\\latex_command "$LATEX"
\\pdflatex_command "$PDFLATEX"
\\view_pdf_command "$PDFVIEWER"
\\pdf_to_ps_command "$PDFPS"
\\dvi_to_ps_command "$DVIPS"
\\relyx_command "$RELYX"
\\literate_command "$LITERATE"
\\literate_extension "$LITERATE_EXT"
\\ps_command "$GS"
\\view_ps_command "$GHOSTVIEW -swap"
\\view_pspic_command "$GHOSTVIEW"
\\ascii_roff_command "$ascii_roff_command"
\\chktex_command "$chktex_command"
\\spell_command "$SPELL"
\\fax_command "$fax_command"
\\linuxdoc_to_latex_command "$linuxdoc_to_latex_command"
\\linuxdoc_to_html_command "$linuxdoc_to_html_command"
\\linuxdoc_to_lyx_command "$linuxdoc_to_lyx_command"
\\docbook_to_dvi_command "$docbook_to_dvi_command"
\\docbook_to_html_command "$docbook_to_html_command"
\\html_command "$html_command"
\\print_spool_command "$print_spool_command"
\\print_spool_printerprefix "$print_spool_printerprefix"
\\font_encoding "$chk_fontenc"
EOF

# Remove superfluous files if we are not writing in the main lib
# directory 
for file in lyxrc.defaults textclass.lst packages.lst \
            doc/LaTeXConfig.lyx ; do
  # we rename the file first, so that we avoid comparing a file with itself
  mv $file $file.new
  if test -r $srcdir/$file && diff $file.new $srcdir/$file >/dev/null 2>/dev/null ; 
  then 
    echo "removing $file, which is identical to the system global version"
    rm -f $file.new
  else
    mv $file.new $file
  fi
done


# Final clean-up
if test $lyx_keep_temps = no ; then
rm -f chkconfig.sed chkconfig.vars wrap_chkconfig.* chklayouts.tex \
      missfont.log
fi
