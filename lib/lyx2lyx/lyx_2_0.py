# This file is part of lyx2lyx
# -*- coding: utf-8 -*-
# Copyright (C) 2008 Jos√© Matos  <jamatos@lyx.org>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

""" Convert files to the file format generated by lyx 2.0"""

import re, string

from parser_tools import find_token, find_end_of, find_tokens, get_value, get_value_string

####################################################################
# Private helper functions

def find_end_of_inset(lines, i):
    " Find end of inset, where lines[i] is included."
    return find_end_of(lines, i, "\\begin_inset", "\\end_inset")


def add_to_preamble(document, text):
    """ Add text to the preamble if it is not already there.
    Only the first line is checked!"""

    if find_token(document.preamble, text[0], 0) != -1:
        return

    document.preamble.extend(text)


def insert_to_preamble(index, document, text):
    """ Insert text to the preamble at a given line"""

    document.preamble.insert(index, text)


####################################################################


def revert_swiss(document):
    " Set language german-ch to ngerman "
    i = 0
    if document.language == "german-ch":
        document.language = "ngerman"
        i = find_token(document.header, "\\language", 0)
        if i != -1:
            document.header[i] = "\\language ngerman"
    j = 0
    while True:
        j = find_token(document.body, "\\lang german-ch", j)
        if j == -1:
            return
        document.body[j] = document.body[j].replace("\\lang german-ch", "\\lang ngerman")
        j = j + 1


def revert_tabularvalign(document):
   " Revert the tabular valign option "
   i = 0
   while True:
       i = find_token(document.body, "\\begin_inset Tabular", i)
       if i == -1:
           return
       j = find_end_of_inset(document.body, i)
       if j == -1:
           document.warning("Malformed LyX document: Could not find end of tabular.")
           i = j
           continue

       k = find_token(document.body, "<features tabularvalignment=", i)
       if k == -1:
           i = j
           continue

       # which valignment is specified?
       tabularvalignment_re = re.compile(r'<features tabularvalignment="(top|bottom)">')
       m = tabularvalignment_re.match(document.body[k])
       if not m:
           i = j
           continue

       tabularvalignment = m.group(1)

       subst = ['\\end_layout', '\\end_inset']
       document.body[j+1:j+1] = subst # just inserts those lines
       subst = ['\\begin_inset Box Frameless',
           'position "' + tabularvalignment[0] +'"',
           'hor_pos "c"',
           'has_inner_box 1',
           'inner_pos "c"',
           'use_parbox 0',
           'width "0col%"',
           'special "none"',
           'height "1in"',
           'height_special "totalheight"',
           'status open',
           '',
           '\\begin_layout Plain Layout']
       document.body[i:i] = subst # this just inserts the array at i
       i += len(subst) + 2 # adjust i to save a few cycles


def revert_phantom(document):
    " Reverts phantom to ERT "
    i = 0
    j = 0
    while True:
      i = find_token(document.body, "\\begin_inset Phantom Phantom", i)
      if i == -1:
          return
      substi = document.body[i].replace('\\begin_inset Phantom Phantom', \
                '\\begin_inset ERT\nstatus collapsed\n\n' \
                '\\begin_layout Plain Layout\n\n\n\\backslash\n' \
                'phantom{\n\\end_layout\n\n\\end_inset\n')
      substi = substi.split('\n')
      document.body[i : i+4] = substi
      i += len(substi)
      j = find_token(document.body, "\\end_layout", i)
      if j == -1:
          document.warning("Malformed LyX document: Could not find end of Phantom inset.")
          return
      substj = document.body[j].replace('\\end_layout', \
                '\\size default\n\n\\begin_inset ERT\nstatus collapsed\n\n' \
                '\\begin_layout Plain Layout\n\n' \
                '}\n\\end_layout\n\n\\end_inset\n')
      substj = substj.split('\n')
      document.body[j : j+4] = substj
      i += len(substj)


def revert_hphantom(document):
    " Reverts hphantom to ERT "
    i = 0
    j = 0
    while True:
      i = find_token(document.body, "\\begin_inset Phantom HPhantom", i)
      if i == -1:
          return
      substi = document.body[i].replace('\\begin_inset Phantom HPhantom', \
                '\\begin_inset ERT\nstatus collapsed\n\n' \
                '\\begin_layout Plain Layout\n\n\n\\backslash\n' \
                'hphantom{\n\\end_layout\n\n\\end_inset\n')
      substi = substi.split('\n')
      document.body[i : i+4] = substi
      i += len(substi)
      j = find_token(document.body, "\\end_layout", i)
      if j == -1:
          document.warning("Malformed LyX document: Could not find end of HPhantom inset.")
          return
      substj = document.body[j].replace('\\end_layout', \
                '\\size default\n\n\\begin_inset ERT\nstatus collapsed\n\n' \
                '\\begin_layout Plain Layout\n\n' \
                '}\n\\end_layout\n\n\\end_inset\n')
      substj = substj.split('\n')
      document.body[j : j+4] = substj
      i += len(substj)


def revert_vphantom(document):
    " Reverts vphantom to ERT "
    i = 0
    j = 0
    while True:
      i = find_token(document.body, "\\begin_inset Phantom VPhantom", i)
      if i == -1:
          return
      substi = document.body[i].replace('\\begin_inset Phantom VPhantom', \
                '\\begin_inset ERT\nstatus collapsed\n\n' \
                '\\begin_layout Plain Layout\n\n\n\\backslash\n' \
                'vphantom{\n\\end_layout\n\n\\end_inset\n')
      substi = substi.split('\n')
      document.body[i : i+4] = substi
      i += len(substi)
      j = find_token(document.body, "\\end_layout", i)
      if j == -1:
          document.warning("Malformed LyX document: Could not find end of VPhantom inset.")
          return
      substj = document.body[j].replace('\\end_layout', \
                '\\size default\n\n\\begin_inset ERT\nstatus collapsed\n\n' \
                '\\begin_layout Plain Layout\n\n' \
                '}\n\\end_layout\n\n\\end_inset\n')
      substj = substj.split('\n')
      document.body[j : j+4] = substj
      i += len(substj)


def revert_xetex(document):
    " Reverts documents that use XeTeX "
    i = find_token(document.header, '\\use_xetex', 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\use_xetex.")
        return
    if get_value(document.header, "\\use_xetex", i) == 'false':
        del document.header[i]
        return
    del document.header[i]
    # 1.) set doc encoding to utf8-plain
    i = find_token(document.header, "\\inputencoding", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\inputencoding.")
    document.header[i] = "\\inputencoding utf8-plain"
    # 2.) check font settings
    l = find_token(document.header, "\\font_roman", 0)
    if l == -1:
        document.warning("Malformed LyX document: Missing \\font_roman.")
    line = document.header[l]
    l = re.compile(r'\\font_roman (.*)$')
    m = l.match(line)
    roman = m.group(1)
    l = find_token(document.header, "\\font_sans", 0)
    if l == -1:
        document.warning("Malformed LyX document: Missing \\font_sans.")
    line = document.header[l]
    l = re.compile(r'\\font_sans (.*)$')
    m = l.match(line)
    sans = m.group(1)
    l = find_token(document.header, "\\font_typewriter", 0)
    if l == -1:
        document.warning("Malformed LyX document: Missing \\font_typewriter.")
    line = document.header[l]
    l = re.compile(r'\\font_typewriter (.*)$')
    m = l.match(line)
    typewriter = m.group(1)
    osf = get_value(document.header, '\\font_osf', 0) == "true"
    sf_scale = float(get_value(document.header, '\\font_sf_scale', 0))
    tt_scale = float(get_value(document.header, '\\font_tt_scale', 0))
    # 3.) set preamble stuff
    pretext = '%% This document must be processed with xelatex!\n'
    pretext += '\\usepackage{fontspec}\n'
    if roman != "default":
        pretext += '\\setmainfont[Mapping=tex-text]{' + roman + '}\n'
    if sans != "default":
        pretext += '\\setsansfont['
        if sf_scale != 100:
            pretext += 'Scale=' + str(sf_scale / 100) + ','
        pretext += 'Mapping=tex-text]{' + sans + '}\n'
    if typewriter != "default":
        pretext += '\\setmonofont'
        if tt_scale != 100:
            pretext += '[Scale=' + str(tt_scale / 100) + ']'
        pretext += '{' + typewriter + '}\n'
    if osf:
        pretext += '\\defaultfontfeatures{Numbers=OldStyle}\n'
    pretext += '\usepackage{xunicode}\n'
    pretext += '\usepackage{xltxtra}\n'
    insert_to_preamble(0, document, pretext)
    # 4.) reset font settings
    i = find_token(document.header, "\\font_roman", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\font_roman.")
    document.header[i] = "\\font_roman default"
    i = find_token(document.header, "\\font_sans", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\font_sans.")
    document.header[i] = "\\font_sans default"
    i = find_token(document.header, "\\font_typewriter", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\font_typewriter.")
    document.header[i] = "\\font_typewriter default"
    i = find_token(document.header, "\\font_osf", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\font_osf.")
    document.header[i] = "\\font_osf false"
    i = find_token(document.header, "\\font_sc", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\font_sc.")
    document.header[i] = "\\font_sc false"
    i = find_token(document.header, "\\font_sf_scale", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\font_sf_scale.")
    document.header[i] = "\\font_sf_scale 100"
    i = find_token(document.header, "\\font_tt_scale", 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\font_tt_scale.")
    document.header[i] = "\\font_tt_scale 100"


def revert_outputformat(document):
    " Remove default output format param "
    i = find_token(document.header, '\\default_output_format', 0)
    if i == -1:
        document.warning("Malformed LyX document: Missing \\default_output_format.")
        return
    del document.header[i]


def revert_backgroundcolor(document):
    " Reverts backgrund color to preamble code "
    i = 0
    colorcode = ""
    while True:
      i = find_token(document.header, "\\backgroundcolor", i)
      if i == -1:
          return
      colorcode = get_value(document.header, '\\backgroundcolor', 0)
      del document.header[i]
      # the color code is in the form #rrggbb where every character denotes a hex number
      # convert the string to an int
      red = string.atoi(colorcode[1:3],16)
      # we want the output "0.5" for the value "127" therefore add here
      if red != 0:
          red = red + 1
      redout = float(red) / 256
      green = string.atoi(colorcode[3:5],16)
      if green != 0:
          green = green + 1
      greenout = float(green) / 256
      blue = string.atoi(colorcode[5:7],16)
      if blue != 0:
          blue = blue + 1
      blueout = float(blue) / 256
      # write the preamble
      insert_to_preamble(0, document,
                           '% Commands inserted by lyx2lyx to set the background color\n'
                           + '\\@ifundefined{definecolor}{\\usepackage{color}}{}\n'
                           + '\\definecolor{page_backgroundcolor}{rgb}{'
                           + str(redout) + ', ' + str(greenout)
                           + ', ' + str(blueout) + '}\n'
                           + '\\pagecolor{page_backgroundcolor}\n')


##
# Conversion hub
#

supported_versions = ["2.0.0","2.0"]
convert = [[346, []],
           [347, []],
           [348, []],
           [349, []],
           [350, []],
           [351, []]
          ]

revert =  [[350, [revert_backgroundcolor]],
           [349, [revert_outputformat]],
           [348, [revert_xetex]],
           [347, [revert_phantom, revert_hphantom, revert_vphantom]],
           [346, [revert_tabularvalign]],
           [345, [revert_swiss]]
          ]


if __name__ == "__main__":
    pass
